generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url      = "file:./database/db.db"
}

model divorcio {
  id String @id @default(uuid())

  etapa  Int    @default(1)
  status String @default("Início do serviço")
  usuario_primario_id   String
  usuario_secundario_id String
}

model usuario {
  id                        String      @id @default(uuid())
  nome                      String?
  telefone                  String?
  email                     String      @unique
  senha                     String
  profissao                 String?
  rg                        String?
  cpf                       String?
  type                      Int?
  estado_civil              String?
  naturalidade              String?
  nome_solteiro             Boolean?
  nao_possui_filhos_menores Boolean?
  is_admin                  Boolean?
  status                    String?
  criado_em                 DateTime    @default(now())
  atualizado_em             DateTime    @updatedAt
  endereco                  endereco?
  pagamento                 pagamento?
  documentos                documento[]

  usuario_vinculado usuario? @relation("UserToUser", fields: [usuario_id], references: [id])
  usuario_id        String?  @unique

  conjuge usuario? @relation("UserToUser")
  data    data?
}

model endereco {
  id            String   @id @default(uuid())
  complemento   String?
  estado        String?
  cidade        String?
  pais          String?
  cep           String?
  criado_em     DateTime @default(now())
  atualizado_em DateTime @updatedAt

  user       usuario? @relation(fields: [usuario_id], references: [id])
  usuario_id String?  @unique
}

model documento {
  id            String   @id @default(uuid())
  url           String
  nome          String
  criado_em     DateTime @default(now())
  atualizado_em DateTime @updatedAt

  user       usuario @relation(fields: [usuario_id], references: [id])
  usuario_id String
}

model pagamento {
  id            String   @id @default(uuid())
  porcentagem   Int?
  total         Int      @default(4000)
  valor_pago    Int?
  pago          Boolean
  criado_em     DateTime @default(now())
  atualizado_em DateTime @updatedAt

  user       usuario? @relation(fields: [usuario_id], references: [id])
  usuario_id String?  @unique
}

model data {
  id        String   @id @default(uuid())
  data      String
  time      String
  data_hora DateTime

  user       usuario? @relation(fields: [usuario_id], references: [id])
  usuario_id String?  @unique
}

model evento {
  id     String @id @default(uuid())
  titulo String
  data   String
}

model resetpassword {
  id        String   @id @default(uuid())
  email     String
  codigo    String
  criado_em DateTime @default(now())
}
